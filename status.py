# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y-iLSdAIbVaE6ICC2WgR61g_DyaQcsvo
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

dataset = pd.read_csv('/content/datasetpart1.csv')

dataset['Outcome'].value_counts()

dataset['Outcome'].value_counts()

dataset.describe()

dataset.groupby('Outcome').mean()

X = dataset.drop(columns = 'Outcome', axis = 1)
 Y = dataset['Outcome']

scaler = StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X)

X = standardized_data
Y = diabetes_dataset['Outcome']

X_train , X_test , Y_train , Y_test = train_test_split(X,Y, test_size = 0.2 , stratify = Y , random_state = 2)

classifier = svm.SVC(kernel = 'linear')

classifier.fit(X_train, Y_train)

X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score of the training data: ',training_data_accuracy)

input_data = (6,65,116,76,15,37.3,100,68,23)

input_data_as_numpy_array = np.asarray(input_data)  #chaning the inpit data to numpy arrray

input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)      #reshape the array as we are predicting for one

std_data = scaler.transform(input_data_reshaped)    #standarize the input device


prediction = classifier.predict(std_data)

print(prediction)

if(prediction[0] == 0):
  print('The person is ready for mission')
else :
  print('the person is ready for mission')

import pickle

filename = 'trained_model.sav'
pickle.dump(classifier, open(filename,'wb'))

# loading the saved model
loaded_model = pickle.load(open('trained_model.sav', 'rb'))

input_data = (6,65,116,76,15,37.3,100,68,23)
#chaning the inpit data to numpy arrray
input_data_as_numpy_array = np.asarray(input_data)

#reshape the array as we are predicting for one
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

#standarize the input device
std_data = scaler.transform(input_data_reshaped)


prediction = loaded_model.predict(std_data)

print(prediction)

print(prediction)

if(prediction[0] == 0):
  print('The person is ready for mission')
else :
  print('the person is ready for mission')
